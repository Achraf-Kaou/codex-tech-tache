// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  IN_PROGRESS
  DONE
}

enum Role {
  ADMIN
  USER
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  name         String?
  role      Role  @default(USER)
  active       Boolean  @default(true)
  bloqued      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
  refreshTokens RefreshToken[]

  tasks        Task[]   @relation("UserToTask")
}

model Project {
  id           Int      @id @default(autoincrement())
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  tasks        Task[]
}

model Task {
  id           Int      @id @default(autoincrement())
  name         String
  status       Status
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?

  projectId    Int
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  user         User[]    @relation("UserToTask")

  @@index([projectId])
}